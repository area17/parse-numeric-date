{"version":3,"file":"parse-numeric-date.modern.js","sources":["../src/index.js"],"sourcesContent":["let locale = new Intl.NumberFormat().resolvedOptions().locale;\nconst twoDigitCutoffYear = 60;\nconst today = new Date().setHours(0, 0, 0, 0);\nconst thisYear = new Date(today).getFullYear();\nconst yearInMs = 365.25 * 24 * 60 * 60 * 1000;\nconst twoYearsInMs = yearInMs * 2;\nconst hundredYearsInMs = yearInMs * 100;\nconst getLocaleOrder = () => {\n  const dateStr = new Date(2000, 11, 13).toLocaleDateString(locale);\n  const parts = [\n    { name: 'd', index: dateStr.indexOf('13') },\n    { name: 'm', index: dateStr.indexOf('12') },\n    { name: 'y', index: dateStr.indexOf('2000') },\n  ].sort((a, b) => a.index - b.index);\n  return parts.map(item => item.name).join('-');\n};\n\nlet localeOrder = getLocaleOrder();\n\n// Month in JavaScript is 0-indexed (January is 0, February is 1, etc),\n// but by using 0 as the day it will give us the last day of the prior\n// month. So passing in 1 as the month number will return the last day\n// of January, not February\nconst daysInMonth = (m, y) => {\n  return new Date(y, m, 0).getDate();\n};\n\nconst make4DigitYear = (y) => {\n  if (y.length === 2) {\n    return parseInt(y) > twoDigitCutoffYear ? `19${y}` : `20${y}`;\n  }\n  return y;\n}\n\n/*\n    persianToGregorian,\n    adapted from: https://stackoverflow.com/questions/71421825/how-to-convert-persian-jalali-dates-to-other-18-calendar-dates-in-javascript-w\n\n    credit to Mohsen Alyafei\n    https://github.com/MohsenAlyafei\n    https://twitter.com/maalyafei\n*/\nfunction persianToGregorian(year, month, day) {\n  year = parseInt(year, 10);\n  month = parseInt(month, 10);\n  day = parseInt(day, 10);\n\n  const dFormat = new Intl.DateTimeFormat('en-u-ca-persian',{\n    dateStyle:'short',\n    timeZone:'UTC'\n  });\n\n  let gregorianDate = new Date(Date.UTC(2000,month,day));\n\n  gregorianDate = new Date(gregorianDate.setUTCDate(gregorianDate.getUTCDate() + 226867));\n\n  const gregorianYear = gregorianDate.getUTCFullYear() - 2000 + year;\n  gregorianDate = new Date(\n    ((gregorianYear < 0) ? '-' : '+') +\n    ('00000' + Math.abs(gregorianYear)).slice(-6) +\n    '-' +\n    ('0' + (gregorianDate.getUTCMonth() + 1)).slice(-2) +\n    '-' +\n    ('0' + (gregorianDate.getUTCDate())).slice(-2)\n  );\n\n  let [pM, pD, pY] = [...dFormat.format(gregorianDate).split('/')]\n  let i = 0;\n\n  gregorianDate = new Date(\n    gregorianDate.setUTCDate(\n      gregorianDate.getUTCDate() +\n      Math.floor(\n        (year * 365.25) +\n        (month * 30.44) +\n        day -\n        (\n          (pY.split(' ')[0] * 365.25) +\n          (pM * 30.44) +\n          (pD*1)\n        )\n      ) - 2\n    )\n  );\n\n  while (i < 4) {\n    [pM, pD, pY] = [...dFormat.format(gregorianDate).split('/')];\n    if (parseInt(pD, 10) === day && parseInt(pM , 10) === month && parseInt(pY.split(' ')[0], 10) === year) {\n      return gregorianDate;\n    }\n    gregorianDate = new Date(gregorianDate.setUTCDate(gregorianDate.getUTCDate() + 1));\n    i++;\n  }\n  console.log('Invalid Persian date');\n  throw new Error('Invalid Persian date');\n}\n\nconst generateDate = (y, m, d) => {\n  // if year is 2 digits, guess 19XX or 20XX\n  y = make4DigitYear(y);\n\n  // convert to numbers\n  y = parseInt(y, 10);\n  m = parseInt(m, 10);\n  d = parseInt(d, 10);\n\n  // stop months being over 12\n  m = m > 12 ? null : m;\n\n  // stop day being over how many days are in the month\n  d = d > daysInMonth(m, y) ? null : d;\n\n  // pad month and day\n  m = m < 10 ? `0${m}` : m;\n  d = d < 10 ? `0${d}` : d;\n\n  // test date\n  let t = new Date(`${y}-${m}-${d}T00:00:00.000+00:00`);\n\n  if (t instanceof Date && !isNaN(t)) {\n    return t;\n  } else {\n    return null;\n  }\n};\n\nconst getMostProbableDate = (dates, dateStr) => {\n  // make date strs, set order score\n  // filter out nulls\n  // order by score\n  dates = dates\n    .map(obj => {\n      // make date\n      obj.d = generateDate(obj.y, obj.m, obj.d);\n      // make year a number\n      obj.y = parseInt(make4DigitYear(obj.y), 10);\n      // find how far away from this year the date is\n      //obj.diff = Math.abs(new Date(today).getFullYear() - obj.y);\n      obj.diff = Math.abs(today - obj.d);\n      // if the date is in locale order, give it a higher score\n      obj.score = localeOrder === obj.order ? 2 : 1;\n      //\n      // Assumption: dates closer to today are better\n      // Why: date pickers for hotels, restaurants, events tend to\n      // happen this year or next year. Dates of birth tend to happen\n      // from now to 100 years in the past. Retirement ages, mortgage\n      // completions tend to happen from now to 100 years in the future\n      //\n      // if the year difference is larger than 100, its probably useless\n      // eg: a 29 made it 2922 rather than 29th of a month, 2022\n      if (obj.diff > hundredYearsInMs) {\n        obj.score--;\n      }\n      // year is really quite close to this year, probably more likely\n      if (obj.diff < twoYearsInMs) {\n        obj.score++;\n      }\n\n      return obj;\n    })\n    // remove any null dates from invalid dates being made\n    .filter(obj => obj.d !== null)\n    // sort by score, high to low\n    .sort((a, b) => {\n      return b.score - a.score;\n    });\n\n  // whats our highest score?\n  const highestScore = dates.length ? dates[0].score : 0;\n\n  // remove anything that hasn't got the lowest score\n  // get just the dates\n  // order by closest to today\n  dates = dates\n    // remove anything that doesn't match our high score\n    .filter(obj => obj.score === highestScore)\n    // sort by year distance, low to high\n    .sort((a, b) => {\n      return a.diff - b.diff;\n    })\n    .map(obj => obj.d);\n\n  // return first date (highest score, lowest year difference)\n  if (dates.length) {\n    return dates[0];\n  }\n  return null;\n};\n\nconst parseNumericDate = (dateStr, options) => {\n  if (options?.locale) {\n    locale = options.locale;\n    localeOrder = getLocaleOrder();\n  }\n\n  let originalDateStr = dateStr;\n  dateStr = dateStr.replace(/[۰-۹]/g, d => '۰۱۲۳۴۵۶۷۸۹'.indexOf(d))\n    .replace(/[٠-٩]/g, d => '٠١٢٣٤٥٦٧٨٩'.indexOf(d)).trim();\n  let dates = [];\n\n  // input probably = ISO YYYY-MM-DD or YYYY-M-D\n  let matches = [\n    ...dateStr.matchAll(/([0-9]{4})[^0-9]{1,}([0-9]{1,2})[^0-9]{1,}([0-9]{1,2})/g)\n  ];\n  if (matches.length > 0) {\n    if (originalDateStr.match(/[۰-۹]/g)) {\n        return persianToGregorian(matches[0][1], matches[0][2], matches[0][3]);\n    } else {\n        return generateDate(matches[0][1], matches[0][2], matches[0][3]);\n    }\n  }\n\n  // input doesn't follow ISO YYYY-MM-DD\n  // lets check for DD-MM-YYYY (or MM-DD-YYYY)\n  matches = [\n    ...dateStr.matchAll(/([0-9]{1,2})[^0-9]{1,}([0-9]{2})[^0-9]{1,}([0-9]{4})/g)\n  ];\n  if (matches.length > 0) {\n    dates.push({\n      y: matches[0][3],\n      m: matches[0][2],\n      d: matches[0][1],\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: matches[0][3],\n      m: matches[0][1],\n      d: matches[0][2],\n      order: 'm-d-y'\n    });\n    //\n    return getMostProbableDate(dates, dateStr);\n  }\n\n  // lets check for DD-MM-YY (or MM-DD-YY), YY-MM-DD\n  // and D-M-YY, M-DD-YY\n  matches = [\n    ...dateStr.matchAll(\n      /([0-9]{1,2})[^0-9]{1,}([0-9]{1,2})[^0-9]{1,}([0-9]{1,2})/g\n    )\n  ];\n  if (matches.length > 0) {\n    dates.push({\n      y: matches[0][3],\n      m: matches[0][2],\n      d: matches[0][1],\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: matches[0][3],\n      m: matches[0][1],\n      d: matches[0][2],\n      order: 'm-d-y'\n    });\n\n    dates.push({\n      y: matches[0][1],\n      m: matches[0][2],\n      d: matches[0][3],\n      order: 'y-m-d'\n    });\n    //\n    return getMostProbableDate(dates, originalDateStr);\n  }\n\n  // input has no spaces between dates\n  // very much guessing now\n\n  // could be YYYYMMDD, DDMMYYYY, MMDDYYYY\n  if (dateStr.length === 8) {\n    dates.push({\n      y: dateStr.substring(4, 8),\n      m: dateStr.substring(2, 4),\n      d: dateStr.substring(0, 2),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(4, 8),\n      m: dateStr.substring(0, 2),\n      d: dateStr.substring(2, 4),\n      order: 'm-d-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(0, 4),\n      m: dateStr.substring(4, 6),\n      d: dateStr.substring(6, 8),\n      order: 'y-m-d'\n    });\n  }\n\n  // could be YYYYMMD, YYYYMDD,\n  // or DDMYYYY, MDDYYYY, DMMYYYY, MMDYYYY\n  if (dateStr.length === 7) {\n    dates.push({\n      y: dateStr.substring(0, 4),\n      m: dateStr.substring(4, 6),\n      d: dateStr.substring(6, 7),\n      order: 'y-m-d'\n    });\n\n    dates.push({\n      y: dateStr.substring(0, 4),\n      m: dateStr.substring(4, 5),\n      d: dateStr.substring(5, 7),\n      order: 'y-m-d'\n    });\n\n    dates.push({\n      y: dateStr.substring(3, 7),\n      m: dateStr.substring(2, 3),\n      d: dateStr.substring(0, 2),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(3, 7),\n      m: dateStr.substring(1, 3),\n      d: dateStr.substring(0, 1),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(3, 7),\n      m: dateStr.substring(0, 2),\n      d: dateStr.substring(2, 3),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(3, 7),\n      m: dateStr.substring(0, 1),\n      d: dateStr.substring(2, 3),\n      order: 'd-m-y'\n    });\n  }\n\n  // or could be YYMMDD, DDMMYY, MMDDYY\n  // or worse, could be YYYYMD, DMYYYY, MDYYYY\n  if (dateStr.length === 6) {\n    dates.push({\n      y: dateStr.substring(4, 6),\n      m: dateStr.substring(2, 4),\n      d: dateStr.substring(0, 2),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(4, 6),\n      m: dateStr.substring(0, 2),\n      d: dateStr.substring(2, 4),\n      order: 'm-d-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(0, 2),\n      m: dateStr.substring(2, 4),\n      d: dateStr.substring(4, 6),\n      order: 'y-m-d'\n    });\n\n    /**/\n    dates.push({\n      y: dateStr.substring(2, 6),\n      m: dateStr.substring(1, 2),\n      d: dateStr.substring(0, 1),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(2, 6),\n      m: dateStr.substring(0, 1),\n      d: dateStr.substring(1, 2),\n      order: 'm-d-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(0, 4),\n      m: dateStr.substring(4, 5),\n      d: dateStr.substring(5, 6),\n      order: 'y-m-d'\n    });\n  }\n\n  // could be YYMMD, YYMDD,\n  // or DDMYY, MDDYY, DMMYY, MMDYY\n  if (dateStr.length === 5) {\n    dates.push({\n      y: dateStr.substring(0, 2),\n      m: dateStr.substring(2, 4),\n      d: dateStr.substring(4, 5),\n      order: 'y-m-d'\n    });\n\n    dates.push({\n      y: dateStr.substring(0, 2),\n      m: dateStr.substring(2, 3),\n      d: dateStr.substring(3, 5),\n      order: 'y-m-d'\n    });\n\n    dates.push({\n      y: dateStr.substring(3, 5),\n      m: dateStr.substring(2, 3),\n      d: dateStr.substring(0, 2),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(3, 5),\n      m: dateStr.substring(1, 3),\n      d: dateStr.substring(0, 1),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(3, 5),\n      m: dateStr.substring(0, 2),\n      d: dateStr.substring(2, 3),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(3, 5),\n      m: dateStr.substring(0, 1),\n      d: dateStr.substring(2, 3),\n      order: 'd-m-y'\n    });\n  }\n\n  // could be YYMD, DMYY, MDYY\n  if (dateStr.length === 4) {\n    dates.push({\n      y: dateStr.substring(2, 4),\n      m: dateStr.substring(1, 2),\n      d: dateStr.substring(0, 1),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(2, 4),\n      m: dateStr.substring(0, 1),\n      d: dateStr.substring(1, 2),\n      order: 'm-d-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(0, 2),\n      m: dateStr.substring(2, 3),\n      d: dateStr.substring(3, 4),\n      order: 'y-m-d'\n    });\n  }\n\n  //\n  return getMostProbableDate(dates, dateStr);\n};\n\nexport default parseNumericDate;\n"],"names":["locale","Intl","NumberFormat","resolvedOptions","today","Date","setHours","getFullYear","getLocaleOrder","toLocaleDateString","name","index","dateStr","indexOf","sort","a","b","map","item","join","make4DigitYear","y","length","m","d","parseInt","getDate","daysInMonth","t","isNaN","getMostProbableDate","dates","highestScore","obj","generateDate","diff","Math","abs","score","localeOrder","order","yearInMs","filter","options","originalDateStr","replace","trim","matchAll","matches","match","year","month","day","dFormat","DateTimeFormat","dateStyle","timeZone","UTC","gregorianDate","setUTCDate","getUTCDate","gregorianYear","getUTCFullYear","slice","getUTCMonth","pM","pD","pY","format","split","i","floor","console","log","Error","persianToGregorian","push","substring"],"mappings":"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"}
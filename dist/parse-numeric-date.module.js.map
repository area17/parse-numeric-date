{"version":3,"file":"parse-numeric-date.module.js","sources":["../src/index.js"],"sourcesContent":["/*\n  TODO:\n\n  Persian Dates:\n\n  ` ١٨‏/١‏/١٩`\n  ` ۱۳۸۹/۵/۱۶`\n\n  Chinese Dates:\n\n  1924年9月25日\n  25‏/9‏/1924.\n*/\n\n\nlet locale = new Intl.NumberFormat().resolvedOptions().locale;\nconst twoDigitCutoffYear = 60;\nconst today = new Date().setHours(0, 0, 0, 0);\nconst thisYear = new Date(today).getFullYear();\nconst yearInMs = 365.25 * 24 * 60 * 60 * 1000;\nconst twoYearsInMs = yearInMs * 2;\nconst hundredYearsInMs = yearInMs * 100;\nconst getLocaleOrder = () => {\n  const dateStr = new Date(2000, 11, 13).toLocaleDateString(locale);\n  const parts = [\n    { name: 'd', index: dateStr.indexOf('13') },\n    { name: 'm', index: dateStr.indexOf('12') },\n    { name: 'y', index: dateStr.indexOf('2000') },\n  ].sort((a, b) => a.index - b.index);\n  return parts.map(item => item.name).join('-');\n};\n\nlet localeOrder = getLocaleOrder();\n\n// Month in JavaScript is 0-indexed (January is 0, February is 1, etc),\n// but by using 0 as the day it will give us the last day of the prior\n// month. So passing in 1 as the month number will return the last day\n// of January, not February\nconst daysInMonth = (m, y) => {\n  return new Date(y, m, 0).getDate();\n};\n\nconst make4DigitYear = (y) => {\n  if (y.length === 2) {\n    return parseInt(y) > twoDigitCutoffYear ? `19${y}` : `20${y}`;\n  }\n  return y;\n}\n\nconst generateDate = (y, m, d) => {\n  // if year is 2 digits, guess 19XX or 20XX\n  y = make4DigitYear(y);\n\n  // convert to numbers\n  y = parseInt(y, 10);\n  m = parseInt(m, 10);\n  d = parseInt(d, 10);\n\n  // stop months being over 12\n  m = m > 12 ? null : m;\n\n  // stop day being over how many days are in the month\n  d = d > daysInMonth(m, y) ? null : d;\n\n  // pad month and day\n  m = m < 10 ? `0${m}` : m;\n  d = d < 10 ? `0${d}` : d;\n\n  // test date\n  let t = new Date(`${y}-${m}-${d}T00:00:00.000+00:00`);\n\n  if (t instanceof Date && !isNaN(t)) {\n    return t;\n  } else {\n    return null;\n  }\n};\n\nconst getMostProbableDate = (dates) => {\n  // make date strs, set order score\n  // filter out nulls\n  // order by score\n  dates = dates\n    .map(obj => {\n      // make date\n      obj.d = generateDate(obj.y, obj.m, obj.d);\n      // make year a number\n      obj.y = parseInt(make4DigitYear(obj.y), 10);\n      // find how far away from this year the date is\n      //obj.diff = Math.abs(new Date(today).getFullYear() - obj.y);\n      obj.diff = Math.abs(today - obj.d);\n      // if the date is in locale order, give it a higher score\n      obj.score = localeOrder === obj.order ? 2 : 1;\n      //\n      // Assumption: dates closer to today are better\n      // Why: date pickers for hotels, restaurants, events tend to\n      // happen this year or next year. Dates of birth tend to happen\n      // from now to 100 years in the past. Retirement ages, mortgage\n      // completions tend to happen from now to 100 years in the future\n      //\n      // if the year difference is larger than 100, its probably useless\n      // eg: a 29 made it 2922 rather than 29th of a month, 2022\n      if (obj.diff > hundredYearsInMs) {\n        obj.score--;\n      }\n      // year is really quite close to this year, probably more likely\n      if (obj.diff < twoYearsInMs) {\n        obj.score++;\n      }\n\n      return obj;\n    })\n    // remove any null dates from invalid dates being made\n    .filter(obj => obj.d !== null)\n    // sort by score, high to low\n    .sort((a, b) => {\n      return b.score - a.score;\n    });\n\n  // whats our highest score?\n  const highestScore = dates[0].score;\n\n  // remove anything that hasn't got the lowest score\n  // get just the dates\n  // order by closest to today\n  dates = dates\n    // remove anything that doesn't match our high score\n    .filter(obj => obj.score === highestScore)\n    // sort by year distance, low to high\n    .sort((a, b) => {\n      return a.diff - b.diff;\n    })\n    .map(obj => obj.d);\n\n  // return first date (highest score, lowest year difference)\n  if (dates.length) {\n    return dates[0];\n  }\n  return null;\n};\n\nconst parseNumericDate = (dateStr, options) => {\n  if (options?.locale) {\n    locale = options.locale;\n    localeOrder = getLocaleOrder();\n  }\n\n  dateStr = dateStr.trim();\n  let dates = [];\n\n  // input probably = ISO YYYY-MM-DD or YYYY-M-D\n  let matches = [\n    ...dateStr.matchAll(/([0-9]{4})[^0-9]{1}([0-9]{1,2})[^0-9]{1}([0-9]{1,2})/g)\n  ];\n  if (matches.length > 0) {\n    return generateDate(matches[0][1], matches[0][2], matches[0][3]);\n  }\n\n  // input doesn't follow ISO YYYY-MM-DD\n  // lets check for DD-MM-YYYY (or MM-DD-YYYY)\n  matches = [\n    ...dateStr.matchAll(/([0-9]{1,2})[^0-9]{1}([0-9]{2})[^0-9]{1}([0-9]{4})/g)\n  ];\n  if (matches.length > 0) {\n    dates.push({\n      y: matches[0][3],\n      m: matches[0][2],\n      d: matches[0][1],\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: matches[0][3],\n      m: matches[0][1],\n      d: matches[0][2],\n      order: 'm-d-y'\n    });\n    //\n    return getMostProbableDate(dates, dateStr);\n  }\n\n  // lets check for DD-MM-YY (or MM-DD-YY), YY-MM-DD\n  // and D-M-YY, M-DD-YY\n  matches = [\n    ...dateStr.matchAll(\n      /([0-9]{1,2})[^0-9]{1}([0-9]{1,2})[^0-9]{1}([0-9]{1,2})/g\n    )\n  ];\n  if (matches.length > 0) {\n    dates.push({\n      y: matches[0][3],\n      m: matches[0][2],\n      d: matches[0][1],\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: matches[0][3],\n      m: matches[0][1],\n      d: matches[0][2],\n      order: 'm-d-y'\n    });\n\n    dates.push({\n      y: matches[0][1],\n      m: matches[0][2],\n      d: matches[0][3],\n      order: 'y-m-d'\n    });\n    //\n    return getMostProbableDate(dates, dateStr);\n  }\n\n  // input has no spaces between dates\n  // very much guessing now\n\n  // could be YYYYMMDD, DDMMYYYY, MMDDYYYY\n  if (dateStr.length === 8) {\n    dates.push({\n      y: dateStr.substring(4, 8),\n      m: dateStr.substring(2, 4),\n      d: dateStr.substring(0, 2),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(4, 8),\n      m: dateStr.substring(0, 2),\n      d: dateStr.substring(2, 4),\n      order: 'm-d-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(0, 4),\n      m: dateStr.substring(4, 6),\n      d: dateStr.substring(6, 8),\n      order: 'y-m-d'\n    });\n  }\n\n  // could be YYYYMMD, YYYYMDD,\n  // or DDMYYYY, MDDYYYY, DMMYYYY, MMDYYYY\n  if (dateStr.length === 7) {\n    dates.push({\n      y: dateStr.substring(0, 4),\n      m: dateStr.substring(4, 6),\n      d: dateStr.substring(6, 7),\n      order: 'y-m-d'\n    });\n\n    dates.push({\n      y: dateStr.substring(0, 4),\n      m: dateStr.substring(4, 5),\n      d: dateStr.substring(5, 7),\n      order: 'y-m-d'\n    });\n\n    dates.push({\n      y: dateStr.substring(3, 7),\n      m: dateStr.substring(2, 3),\n      d: dateStr.substring(0, 2),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(3, 7),\n      m: dateStr.substring(1, 3),\n      d: dateStr.substring(0, 1),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(3, 7),\n      m: dateStr.substring(0, 2),\n      d: dateStr.substring(2, 3),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(3, 7),\n      m: dateStr.substring(0, 1),\n      d: dateStr.substring(2, 3),\n      order: 'd-m-y'\n    });\n  }\n\n  // or could be YYMMDD, DDMMYY, MMDDYY\n  // or worse, could be YYYYMD, DMYYYY, MDYYYY\n  if (dateStr.length === 6) {\n    dates.push({\n      y: dateStr.substring(4, 6),\n      m: dateStr.substring(2, 4),\n      d: dateStr.substring(0, 2),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(4, 6),\n      m: dateStr.substring(0, 2),\n      d: dateStr.substring(2, 4),\n      order: 'm-d-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(0, 2),\n      m: dateStr.substring(2, 4),\n      d: dateStr.substring(4, 6),\n      order: 'y-m-d'\n    });\n\n    /**/\n    dates.push({\n      y: dateStr.substring(2, 6),\n      m: dateStr.substring(1, 2),\n      d: dateStr.substring(0, 1),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(2, 6),\n      m: dateStr.substring(0, 1),\n      d: dateStr.substring(1, 2),\n      order: 'm-d-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(0, 4),\n      m: dateStr.substring(4, 5),\n      d: dateStr.substring(5, 6),\n      order: 'y-m-d'\n    });\n  }\n\n  // could be YYMMD, YYMDD,\n  // or DDMYY, MDDYY, DMMYY, MMDYY\n  if (dateStr.length === 5) {\n    dates.push({\n      y: dateStr.substring(0, 2),\n      m: dateStr.substring(2, 4),\n      d: dateStr.substring(4, 5),\n      order: 'y-m-d'\n    });\n\n    dates.push({\n      y: dateStr.substring(0, 2),\n      m: dateStr.substring(2, 3),\n      d: dateStr.substring(3, 5),\n      order: 'y-m-d'\n    });\n\n    dates.push({\n      y: dateStr.substring(3, 5),\n      m: dateStr.substring(2, 3),\n      d: dateStr.substring(0, 2),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(3, 5),\n      m: dateStr.substring(1, 3),\n      d: dateStr.substring(0, 1),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(3, 5),\n      m: dateStr.substring(0, 2),\n      d: dateStr.substring(2, 3),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(3, 5),\n      m: dateStr.substring(0, 1),\n      d: dateStr.substring(2, 3),\n      order: 'd-m-y'\n    });\n  }\n\n  // could be YYMD, DMYY, MDYY\n  if (dateStr.length === 4) {\n    dates.push({\n      y: dateStr.substring(2, 4),\n      m: dateStr.substring(1, 2),\n      d: dateStr.substring(0, 1),\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(2, 4),\n      m: dateStr.substring(0, 1),\n      d: dateStr.substring(1, 2),\n      order: 'm-d-y'\n    });\n\n    dates.push({\n      y: dateStr.substring(0, 2),\n      m: dateStr.substring(2, 3),\n      d: dateStr.substring(3, 4),\n      order: 'y-m-d'\n    });\n  }\n\n  //\n  return getMostProbableDate(dates, dateStr);\n};\n\nexport default parseNumericDate;\n"],"names":["locale","Intl","NumberFormat","resolvedOptions","today","Date","setHours","getFullYear","getLocaleOrder","dateStr","toLocaleDateString","name","index","indexOf","sort","a","b","map","item","join","localeOrder","make4DigitYear","y","length","parseInt","generateDate","m","d","getDate","daysInMonth","t","isNaN","getMostProbableDate","dates","highestScore","obj","diff","Math","abs","score","order","yearInMs","filter","parseNumericDate","options","trim","matches","concat","matchAll","push","substring"],"mappings":"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"}
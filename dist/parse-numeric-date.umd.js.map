{"version":3,"file":"parse-numeric-date.umd.js","sources":["../src/index.js"],"sourcesContent":["let locale = new Intl.NumberFormat().resolvedOptions().locale;\nconst twoDigitCutoffYear = 60;\nconst today = new Date().setHours(0, 0, 0, 0);\nconst thisYear = new Date(today).getFullYear();\nconst yearInMs = 365.25 * 24 * 60 * 60 * 1000;\nconst twoYearsInMs = yearInMs * 2;\nconst hundredYearsInMs = yearInMs * 100;\nconst getLocaleOrder = () => {\n  const dateStr = new Date(2000, 11, 13).toLocaleDateString(locale);\n  const parts = [\n    { name: 'd', index: dateStr.indexOf('13') },\n    { name: 'm', index: dateStr.indexOf('12') },\n    { name: 'y', index: dateStr.indexOf('2000') },\n  ].sort((a, b) => a.index - b.index);\n  return parts.map(item => item.name).join('-');\n};\n\nlet localeOrder = getLocaleOrder();\n\n// Month in JavaScript is 0-indexed (January is 0, February is 1, etc),\n// but by using 0 as the day it will give us the last day of the prior\n// month. So passing in 1 as the month number will return the last day\n// of January, not February\nconst daysInMonth = (m, y) => {\n  return new Date(y, m, 0).getDate();\n};\n\nconst make4DigitYear = (y) => {\n  if (y.length === 2) {\n    return parseInt(y) > twoDigitCutoffYear ? `19${y}` : `20${y}`;\n  }\n  return y;\n}\n\n/*\n    persianToGregorian,\n    adapted from: https://stackoverflow.com/questions/71421825/how-to-convert-persian-jalali-dates-to-other-18-calendar-dates-in-javascript-w\n\n    credit to Mohsen Alyafei\n    https://github.com/MohsenAlyafei\n    https://twitter.com/maalyafei\n*/\nfunction persianToGregorian(year, month, day) {\n  year = parseInt(year, 10);\n  month = parseInt(month, 10);\n  day = parseInt(day, 10);\n\n  const dFormat = new Intl.DateTimeFormat('en-u-ca-persian',{\n    dateStyle:'short',\n    timeZone:'UTC'\n  });\n\n  let gregorianDate = new Date(Date.UTC(2000,month,day));\n\n  gregorianDate = new Date(gregorianDate.setUTCDate(gregorianDate.getUTCDate() + 226867));\n\n  const gregorianYear = gregorianDate.getUTCFullYear() - 2000 + year;\n  gregorianDate = new Date(\n    ((gregorianYear < 0) ? '-' : '+') +\n    ('00000' + Math.abs(gregorianYear)).slice(-6) +\n    '-' +\n    ('0' + (gregorianDate.getUTCMonth() + 1)).slice(-2) +\n    '-' +\n    ('0' + (gregorianDate.getUTCDate())).slice(-2)\n  );\n\n  let [pM, pD, pY] = [...dFormat.format(gregorianDate).split('/')]\n  let i = 0;\n\n  gregorianDate = new Date(\n    gregorianDate.setUTCDate(\n      gregorianDate.getUTCDate() +\n      Math.floor(\n        (year * 365.25) +\n        (month * 30.44) +\n        day -\n        (\n          (pY.split(' ')[0] * 365.25) +\n          (pM * 30.44) +\n          (pD*1)\n        )\n      ) - 2\n    )\n  );\n\n  while (i < 4) {\n    [pM, pD, pY] = [...dFormat.format(gregorianDate).split('/')];\n    if (parseInt(pD, 10) === day && parseInt(pM , 10) === month && parseInt(pY.split(' ')[0], 10) === year) {\n      return gregorianDate;\n    }\n    gregorianDate = new Date(gregorianDate.setUTCDate(gregorianDate.getUTCDate() + 1));\n    i++;\n  }\n  console.log('Invalid Persian date');\n  throw new Error('Invalid Persian date');\n}\n\nconst getDatePart = (dateStr, format, part) => {\n    return dateStr.substring(format.indexOf(part), format.indexOf(part) + (format.match(new RegExp(part, 'g')) || []).length);\n};\n\nconst splitDateString = (dateStr, format) => {\n    const parts = [\n      { name: 'd', index: format.indexOf('D') },\n      { name: 'm', index: format.indexOf('M') },\n      { name: 'y', index: format.indexOf('Y') },\n    ].sort((a, b) => a.index - b.index);\n\n    return {\n        y: getDatePart(dateStr, format, 'Y'),\n        m: getDatePart(dateStr, format, 'M'),\n        d: getDatePart(dateStr, format, 'D'),\n        order: parts.map(item => item.name).join('-'),\n    }\n};\n\nconst splitDates = (dateStr, formats) => {\n    return formats.map(format => splitDateString(dateStr, format));\n};\n\nconst generateDate = (y, m, d) => {\n  // if year is 2 digits, guess 19XX or 20XX\n  y = make4DigitYear(y);\n\n  // convert to numbers\n  y = parseInt(y, 10);\n  m = parseInt(m, 10);\n  d = parseInt(d, 10);\n\n  // stop months being over 12\n  m = m > 12 ? null : m;\n\n  // stop day being over how many days are in the month\n  d = d > daysInMonth(m, y) ? null : d;\n\n  // pad month and day\n  m = m < 10 ? `0${m}` : m;\n  d = d < 10 ? `0${d}` : d;\n\n  // test date\n  let t = new Date(`${y}-${m}-${d}T00:00:00.000+00:00`);\n\n  if (t instanceof Date && !isNaN(t)) {\n    return t;\n  } else {\n    return null;\n  }\n};\n\nconst getMostProbableDate = (dates, dateStr) => {\n  // make date strs, set order score\n  // filter out nulls\n  // order by score\n  dates = dates\n    .map(obj => {\n      // make date\n      obj.d = generateDate(obj.y, obj.m, obj.d);\n      // make year a number\n      obj.y = parseInt(make4DigitYear(obj.y), 10);\n      // find how far away from this year the date is\n      //obj.diff = Math.abs(new Date(today).getFullYear() - obj.y);\n      obj.diff = Math.abs(today - obj.d);\n      // if the date is in locale order, give it a higher score\n      obj.score = localeOrder === obj.order ? 2 : 1;\n      //\n      // Assumption: dates closer to today are better\n      // Why: date pickers for hotels, restaurants, events tend to\n      // happen this year or next year. Dates of birth tend to happen\n      // from now to 100 years in the past. Retirement ages, mortgage\n      // completions tend to happen from now to 100 years in the future\n      //\n      // if the year difference is larger than 100, its probably useless\n      // eg: a 29 made it 2922 rather than 29th of a month, 2022\n      if (obj.diff > hundredYearsInMs) {\n        obj.score--;\n      }\n      // year is really quite close to this year, probably more likely\n      if (obj.diff < twoYearsInMs) {\n        obj.score++;\n      }\n\n      return obj;\n    })\n    // remove any null dates from invalid dates being made\n    .filter(obj => obj.d !== null)\n    // sort by score, high to low\n    .sort((a, b) => {\n      return b.score - a.score;\n    });\n\n  // whats our highest score?\n  const highestScore = dates.length ? dates[0].score : 0;\n\n  // remove anything that hasn't got the lowest score\n  // get just the dates\n  // order by closest to today\n  dates = dates\n    // remove anything that doesn't match our high score\n    .filter(obj => obj.score === highestScore)\n    // sort by year distance, low to high\n    .sort((a, b) => {\n      return a.diff - b.diff;\n    })\n    .map(obj => obj.d);\n\n  // return first date (highest score, lowest year difference)\n  if (dates.length) {\n    return dates[0];\n  }\n  return null;\n};\n\nconst parseNumericDate = (dateStr, options) => {\n  if (options?.locale) {\n    locale = options.locale;\n    localeOrder = getLocaleOrder();\n  }\n\n  let originalDateStr = dateStr;\n  dateStr = dateStr.replace(/[۰-۹]/g, d => '۰۱۲۳۴۵۶۷۸۹'.indexOf(d))\n    .replace(/[٠-٩]/g, d => '٠١٢٣٤٥٦٧٨٩'.indexOf(d)).trim();\n  let dates = [];\n\n  // input probably = ISO YYYY-MM-DD or YYYY-M-D\n  let matches = [\n    ...dateStr.matchAll(/([0-9]{4})[^0-9]{1,}([0-9]{1,2})[^0-9]{1,}([0-9]{1,2})/g)\n  ];\n  if (matches.length > 0) {\n    if (originalDateStr.match(/[۰-۹]/g)) {\n        return persianToGregorian(matches[0][1], matches[0][2], matches[0][3]);\n    } else {\n        return generateDate(matches[0][1], matches[0][2], matches[0][3]);\n    }\n  }\n\n  // input doesn't follow ISO YYYY-MM-DD\n  // lets check for DD-MM-YYYY (or MM-DD-YYYY)\n  matches = [\n    ...dateStr.matchAll(/([0-9]{1,2})[^0-9]{1,}([0-9]{2})[^0-9]{1,}([0-9]{4})/g)\n  ];\n  if (matches.length > 0) {\n    dates.push({\n      y: matches[0][3],\n      m: matches[0][2],\n      d: matches[0][1],\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: matches[0][3],\n      m: matches[0][1],\n      d: matches[0][2],\n      order: 'm-d-y'\n    });\n    //\n    return getMostProbableDate(dates, dateStr);\n  }\n\n  // lets check for DD-MM-YY (or MM-DD-YY), YY-MM-DD\n  // and D-M-YY, M-DD-YY\n  matches = [\n    ...dateStr.matchAll(\n      /([0-9]{1,2})[^0-9]{1,}([0-9]{1,2})[^0-9]{1,}([0-9]{1,2})/g\n    )\n  ];\n  if (matches.length > 0) {\n    dates.push({\n      y: matches[0][3],\n      m: matches[0][2],\n      d: matches[0][1],\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: matches[0][3],\n      m: matches[0][1],\n      d: matches[0][2],\n      order: 'm-d-y'\n    });\n\n    dates.push({\n      y: matches[0][1],\n      m: matches[0][2],\n      d: matches[0][3],\n      order: 'y-m-d'\n    });\n    //\n    return getMostProbableDate(dates, originalDateStr);\n  }\n\n  // input has no spaces between dates\n  // very much guessing now\n\n  // could be YYYYMMDD, DDMMYYYY, MMDDYYYY\n  if (dateStr.length === 8) {\n    dates = splitDates(dateStr, ['YYYYMMDD', 'DDMMYYYY', 'MMDDYYYY']);\n  }\n\n  // could be YYYYMMD, YYYYMDD,\n  // or DDMYYYY, MDDYYYY, DMMYYYY, MMDYYYY\n  if (dateStr.length === 7) {\n    dates = splitDates(dateStr, ['YYYYMMD', 'YYYYMDD', 'DDMYYYY', 'MDDYYYY', 'DMMYYYY', 'MMDYYYY']);\n  }\n\n  // or could be YYMMDD, DDMMYY, MMDDYY\n  // or worse, could be YYYYMD, DMYYYY, MDYYYY\n  if (dateStr.length === 6) {\n    dates = splitDates(dateStr, ['YYMMDD', 'DDMMYY', 'MMDDYY', 'YYYYMD', 'DMYYYY', 'MDYYYY']);\n  }\n\n  // could be YYMMD, YYMDD,\n  // or DDMYY, MDDYY, DMMYY, MMDYY\n  if (dateStr.length === 5) {\n    dates = splitDates(dateStr, ['YYMMD', 'YYMDD', 'DDMYY', 'MDDYY', 'DMMYY', 'MMDYY']);\n  }\n\n  // could be YYMD, DMYY, MDYY\n  if (dateStr.length === 4) {\n    dates = splitDates(dateStr, ['YYMD', 'DMYY', 'MDYY']);\n  }\n\n  //\n  return getMostProbableDate(dates, dateStr);\n};\n\nexport default parseNumericDate;\n"],"names":["locale","Intl","NumberFormat","resolvedOptions","today","Date","setHours","getFullYear","getLocaleOrder","dateStr","toLocaleDateString","name","index","indexOf","sort","a","b","map","item","join","localeOrder","make4DigitYear","y","length","parseInt","getDatePart","format","part","substring","match","RegExp","splitDates","formats","splitDateString","parts","m","d","order","generateDate","getDate","daysInMonth","t","isNaN","getMostProbableDate","dates","highestScore","obj","diff","Math","abs","score","yearInMs","filter","options","originalDateStr","replace","trim","matchAll","matches","year","month","day","DateTimeFormat","dateStyle","timeZone","gregorianDate","UTC","gregorianYear","setUTCDate","getUTCDate","getUTCFullYear","slice","getUTCMonth","_ref","concat","dFormat","split","pM","pD","pY","i","floor","_ref2","console","log","Error","persianToGregorian","push"],"mappings":"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"}
{"version":3,"file":"parse-numeric-date.modern.js","sources":["../src/index.js"],"sourcesContent":["let locale = new Intl.NumberFormat().resolvedOptions().locale;\nconst twoDigitCutoffYear = 60;\nconst today = new Date().setHours(0, 0, 0, 0);\nconst thisYear = new Date(today).getFullYear();\nconst yearInMs = 365.25 * 24 * 60 * 60 * 1000;\nconst twoYearsInMs = yearInMs * 2;\nconst hundredYearsInMs = yearInMs * 100;\nconst getLocaleOrder = () => {\n  const dateStr = new Date(2000, 11, 13).toLocaleDateString(locale);\n  const parts = [\n    { name: 'd', index: dateStr.indexOf('13') },\n    { name: 'm', index: dateStr.indexOf('12') },\n    { name: 'y', index: dateStr.indexOf('2000') },\n  ].sort((a, b) => a.index - b.index);\n  return parts.map(item => item.name).join('-');\n};\n\nlet localeOrder = getLocaleOrder();\n\n// Month in JavaScript is 0-indexed (January is 0, February is 1, etc),\n// but by using 0 as the day it will give us the last day of the prior\n// month. So passing in 1 as the month number will return the last day\n// of January, not February\nconst daysInMonth = (m, y) => {\n  return new Date(y, m, 0).getDate();\n};\n\nconst make4DigitYear = (y) => {\n  if (y.length === 2) {\n    return parseInt(y) > twoDigitCutoffYear ? `19${y}` : `20${y}`;\n  }\n  return y;\n}\n\n/*\n    persianToGregorian,\n    adapted from: https://stackoverflow.com/questions/71421825/how-to-convert-persian-jalali-dates-to-other-18-calendar-dates-in-javascript-w\n\n    credit to Mohsen Alyafei\n    https://github.com/MohsenAlyafei\n    https://twitter.com/maalyafei\n*/\nfunction persianToGregorian(year, month, day) {\n  year = parseInt(year, 10);\n  month = parseInt(month, 10);\n  day = parseInt(day, 10);\n\n  const dFormat = new Intl.DateTimeFormat('en-u-ca-persian',{\n    dateStyle:'short',\n    timeZone:'UTC'\n  });\n\n  let gregorianDate = new Date(Date.UTC(2000,month,day));\n\n  gregorianDate = new Date(gregorianDate.setUTCDate(gregorianDate.getUTCDate() + 226867));\n\n  const gregorianYear = gregorianDate.getUTCFullYear() - 2000 + year;\n  gregorianDate = new Date(\n    ((gregorianYear < 0) ? '-' : '+') +\n    ('00000' + Math.abs(gregorianYear)).slice(-6) +\n    '-' +\n    ('0' + (gregorianDate.getUTCMonth() + 1)).slice(-2) +\n    '-' +\n    ('0' + (gregorianDate.getUTCDate())).slice(-2)\n  );\n\n  let [pM, pD, pY] = [...dFormat.format(gregorianDate).split('/')]\n  let i = 0;\n\n  gregorianDate = new Date(\n    gregorianDate.setUTCDate(\n      gregorianDate.getUTCDate() +\n      Math.floor(\n        (year * 365.25) +\n        (month * 30.44) +\n        day -\n        (\n          (pY.split(' ')[0] * 365.25) +\n          (pM * 30.44) +\n          (pD*1)\n        )\n      ) - 2\n    )\n  );\n\n  while (i < 4) {\n    [pM, pD, pY] = [...dFormat.format(gregorianDate).split('/')];\n    if (parseInt(pD, 10) === day && parseInt(pM , 10) === month && parseInt(pY.split(' ')[0], 10) === year) {\n      return gregorianDate;\n    }\n    gregorianDate = new Date(gregorianDate.setUTCDate(gregorianDate.getUTCDate() + 1));\n    i++;\n  }\n  console.log('Invalid Persian date');\n  throw new Error('Invalid Persian date');\n}\n\nconst getDatePart = (dateStr, format, part) => {\n    return dateStr.substring(format.indexOf(part), format.indexOf(part) + (format.match(new RegExp(part, 'g')) || []).length);\n};\n\nconst splitDateString = (dateStr, format) => {\n    const parts = [\n      { name: 'd', index: format.indexOf('D') },\n      { name: 'm', index: format.indexOf('M') },\n      { name: 'y', index: format.indexOf('Y') },\n    ].sort((a, b) => a.index - b.index);\n\n    return {\n        y: getDatePart(dateStr, format, 'Y'),\n        m: getDatePart(dateStr, format, 'M'),\n        d: getDatePart(dateStr, format, 'D'),\n        order: parts.map(item => item.name).join('-'),\n    }\n};\n\nconst splitDates = (dateStr, formats) => {\n    return formats.map(format => splitDateString(dateStr, format));\n};\n\nconst generateDate = (y, m, d) => {\n  // if year is 2 digits, guess 19XX or 20XX\n  y = make4DigitYear(y);\n\n  // convert to numbers\n  y = parseInt(y, 10);\n  m = parseInt(m, 10);\n  d = parseInt(d, 10);\n\n  // stop months being over 12\n  m = m > 12 ? null : m;\n\n  // stop day being over how many days are in the month\n  d = d > daysInMonth(m, y) ? null : d;\n\n  // pad month and day\n  m = m < 10 ? `0${m}` : m;\n  d = d < 10 ? `0${d}` : d;\n\n  // test date\n  let t = new Date(`${y}-${m}-${d}T00:00:00.000+00:00`);\n\n  if (t instanceof Date && !isNaN(t)) {\n    return t;\n  } else {\n    return null;\n  }\n};\n\nconst getMostProbableDate = (dates, dateStr) => {\n  // make date strs, set order score\n  // filter out nulls\n  // order by score\n  dates = dates\n    .map(obj => {\n      // make date\n      obj.d = generateDate(obj.y, obj.m, obj.d);\n      // make year a number\n      obj.y = parseInt(make4DigitYear(obj.y), 10);\n      // find how far away from this year the date is\n      //obj.diff = Math.abs(new Date(today).getFullYear() - obj.y);\n      obj.diff = Math.abs(today - obj.d);\n      // if the date is in locale order, give it a higher score\n      obj.score = localeOrder === obj.order ? 2 : 1;\n      //\n      // Assumption: dates closer to today are better\n      // Why: date pickers for hotels, restaurants, events tend to\n      // happen this year or next year. Dates of birth tend to happen\n      // from now to 100 years in the past. Retirement ages, mortgage\n      // completions tend to happen from now to 100 years in the future\n      //\n      // if the year difference is larger than 100, its probably useless\n      // eg: a 29 made it 2922 rather than 29th of a month, 2022\n      if (obj.diff > hundredYearsInMs) {\n        obj.score--;\n      }\n      // year is really quite close to this year, probably more likely\n      if (obj.diff < twoYearsInMs) {\n        obj.score++;\n      }\n\n      return obj;\n    })\n    // remove any null dates from invalid dates being made\n    .filter(obj => obj.d !== null)\n    // sort by score, high to low\n    .sort((a, b) => {\n      return b.score - a.score;\n    });\n\n  // whats our highest score?\n  const highestScore = dates.length ? dates[0].score : 0;\n\n  // remove anything that hasn't got the lowest score\n  // get just the dates\n  // order by closest to today\n  dates = dates\n    // remove anything that doesn't match our high score\n    .filter(obj => obj.score === highestScore)\n    // sort by year distance, low to high\n    .sort((a, b) => {\n      return a.diff - b.diff;\n    })\n    .map(obj => obj.d);\n\n  // return first date (highest score, lowest year difference)\n  if (dates.length) {\n    return dates[0];\n  }\n  return null;\n};\n\nconst parseNumericDate = (dateStr, options) => {\n  if (options?.locale) {\n    locale = options.locale;\n    localeOrder = getLocaleOrder();\n  }\n\n  let originalDateStr = dateStr;\n  dateStr = dateStr.replace(/[۰-۹]/g, d => '۰۱۲۳۴۵۶۷۸۹'.indexOf(d))\n    .replace(/[٠-٩]/g, d => '٠١٢٣٤٥٦٧٨٩'.indexOf(d)).trim();\n  let dates = [];\n\n  // input probably = ISO YYYY-MM-DD or YYYY-M-D\n  let matches = [\n    ...dateStr.matchAll(/([0-9]{4})[^0-9]{1,}([0-9]{1,2})[^0-9]{1,}([0-9]{1,2})/g)\n  ];\n  if (matches.length > 0) {\n    if (originalDateStr.match(/[۰-۹]/g)) {\n        return persianToGregorian(matches[0][1], matches[0][2], matches[0][3]);\n    } else {\n        return generateDate(matches[0][1], matches[0][2], matches[0][3]);\n    }\n  }\n\n  // input doesn't follow ISO YYYY-MM-DD\n  // lets check for DD-MM-YYYY (or MM-DD-YYYY)\n  matches = [\n    ...dateStr.matchAll(/([0-9]{1,2})[^0-9]{1,}([0-9]{2})[^0-9]{1,}([0-9]{4})/g)\n  ];\n  if (matches.length > 0) {\n    dates.push({\n      y: matches[0][3],\n      m: matches[0][2],\n      d: matches[0][1],\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: matches[0][3],\n      m: matches[0][1],\n      d: matches[0][2],\n      order: 'm-d-y'\n    });\n    //\n    return getMostProbableDate(dates, dateStr);\n  }\n\n  // lets check for DD-MM-YY (or MM-DD-YY), YY-MM-DD\n  // and D-M-YY, M-DD-YY\n  matches = [\n    ...dateStr.matchAll(\n      /([0-9]{1,2})[^0-9]{1,}([0-9]{1,2})[^0-9]{1,}([0-9]{1,2})/g\n    )\n  ];\n  if (matches.length > 0) {\n    dates.push({\n      y: matches[0][3],\n      m: matches[0][2],\n      d: matches[0][1],\n      order: 'd-m-y'\n    });\n\n    dates.push({\n      y: matches[0][3],\n      m: matches[0][1],\n      d: matches[0][2],\n      order: 'm-d-y'\n    });\n\n    dates.push({\n      y: matches[0][1],\n      m: matches[0][2],\n      d: matches[0][3],\n      order: 'y-m-d'\n    });\n    //\n    return getMostProbableDate(dates, originalDateStr);\n  }\n\n  // input has no spaces between dates\n  // very much guessing now\n\n  // could be YYYYMMDD, DDMMYYYY, MMDDYYYY\n  if (dateStr.length === 8) {\n    dates = splitDates(dateStr, ['YYYYMMDD', 'DDMMYYYY', 'MMDDYYYY']);\n  }\n\n  // could be YYYYMMD, YYYYMDD,\n  // or DDMYYYY, MDDYYYY, DMMYYYY, MMDYYYY\n  if (dateStr.length === 7) {\n    dates = splitDates(dateStr, ['YYYYMMD', 'YYYYMDD', 'DDMYYYY', 'MDDYYYY', 'DMMYYYY', 'MMDYYYY']);\n  }\n\n  // or could be YYMMDD, DDMMYY, MMDDYY\n  // or worse, could be YYYYMD, DMYYYY, MDYYYY\n  if (dateStr.length === 6) {\n    dates = splitDates(dateStr, ['YYMMDD', 'DDMMYY', 'MMDDYY', 'YYYYMD', 'DMYYYY', 'MDYYYY']);\n  }\n\n  // could be YYMMD, YYMDD,\n  // or DDMYY, MDDYY, DMMYY, MMDYY\n  if (dateStr.length === 5) {\n    dates = splitDates(dateStr, ['YYMMD', 'YYMDD', 'DDMYY', 'MDDYY', 'DMMYY', 'MMDYY']);\n  }\n\n  // could be YYMD, DMYY, MDYY\n  if (dateStr.length === 4) {\n    dates = splitDates(dateStr, ['YYMD', 'DMYY', 'MDYY']);\n  }\n\n  //\n  return getMostProbableDate(dates, dateStr);\n};\n\nexport default parseNumericDate;\n"],"names":["locale","Intl","NumberFormat","resolvedOptions","today","Date","setHours","getFullYear","getLocaleOrder","dateStr","toLocaleDateString","name","index","indexOf","sort","a","b","map","item","join","localeOrder","make4DigitYear","y","length","getDatePart","format","part","substring","match","RegExp","splitDates","formats","parts","m","d","order","splitDateString","parseInt","getDate","daysInMonth","t","isNaN","getMostProbableDate","dates","highestScore","obj","generateDate","diff","Math","abs","score","yearInMs","filter","parseNumericDate","options","originalDateStr","replace","trim","matchAll","matches","year","month","day","dFormat","DateTimeFormat","dateStyle","timeZone","gregorianDate","UTC","setUTCDate","getUTCDate","gregorianYear","getUTCFullYear","slice","getUTCMonth","pM","pD","pY","split","floor","i","console","log","Error","persianToGregorian","push"],"mappings":"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"}